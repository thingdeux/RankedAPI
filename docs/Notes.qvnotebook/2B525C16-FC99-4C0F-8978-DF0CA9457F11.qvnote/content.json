{
  "title": "V1 TODOS",
  "cells": [
    {
      "type": "markdown",
      "data": "# BEFORE V1 - ASKS"
    },
    {
      "type": "markdown",
      "data": "### Up Next:\n- [ ] Define API structure for Photos\n- [ ] Define API structure for Notifications\n- [ ] Define API structure for Sharing\n- [ ] Define API structure for Contests.\n- [ ] Setup Celery Worker queues\n- [ ] 'Add by Username' [SETTINGS]\n- [ ] 'Add Highest Ranked in Category' functionality [SETTINGS] - gnarly query - can cache for a while.\n"
    },
    {
      "type": "markdown",
      "data": "### Large Effort\n- [ ] Photos\n  - Define and document models for API\n  - Implement hashtagable\n  - Url generation for photo uploads.\n  - Do photos need to be processed? \n  - Are photos supposed to be showing inline with videos on the home feed?\n- [ ] Notifications\n  - Base Implementation\n  - Allow user to set the notification preference\n  - Push Notification on API server\n  - Define notification structure in API\n  - Look into websockets for up to the minute notifications while using the app - otherwise poll.\n  - Create 'Your Peeps' notification endpoint\n  - Create 'Your Posts' notification endpoint\n  - Create 'Your Ranks' notification endpoint - [Activity Feed of the users rankings]\n  - Create notifications endpoint for rankings you've received.\n- [ ] Sharing:\n - Open share endpoint for unauthed viewing.\n - Prevent users from sharing your videos.\n - Notification for someone generating a share link.\n- [ ] Contests:\n  - Button on the profile page that people can click on to see contests.\n  - Users can click join - it sends them to the upload screen with a pre-filled hashtag.\n  - The ranking will be determined after a set amount of time - and will query based on hashtag and true ranking.\n  - Only hashtags that were entered on upload are eligible.\n  - Contests will be associated to sponsors.\n  - Contest Name.\n    Contest Length.\n    Contest Sponsor -> Sponsor has associated data like url for their logo or url for their site ..\n    Contest Associated Hashtag\n    Contest Rules / Terms / Restrictions\n  - Need to refactor the Hashtag implementation to support contests - each Hashtag should *gulp* have its on entry in the DB.\n"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "markdown",
      "data": "\n### One Offs / Small Effort\n- [x] Search for base category. Should return all videos that match the sub-category\n- [ ] Endpoint for connect contacts / connect facebook. Should take a batch array of e-mails and return which ones are registered.\n- [ ] Implement video views logic to prevent gaming of the views sytem (shouldn't be able to just refresh and click a bunch to inflate)\n- [ ] Paginate comments.\n- [ ] Surface Ranked History (That is - the authed users ranking activity)\n- [ ] Create multiple image sizes for profile.\n- [ ] Allow avatars to have generated urls liek on web. Those shouldn't be accepted on the API server.\n- [ ] Need to define and implement the ranking algorithm\n- [ ] Implement Trend Setters logic  - [Currently just returning random users]\n- [ ] Implement report video functionality on the API.\n- [ ] Implement auto-dmca takedown\n- [ ] Purge /following on add or remove\n- [ ] 'Follow these trendsetters' [Settings] - Clarify and build\n- [ ] 'Login Verification' [Settings]\n- [ ] Invesitgate cache-control private for /users/me/ and /video\n- [ ] Investigate Varnish for OAuth2 [https://docs.varnish-software.com/policy-engine/auth/oauth2/]\n- [ ] Update CodeDeploy Permissions for code deploy user. More restrictive\n- [ ] Upgrade to Python 3.6 on centOS boxes.\n- [ ] Update CORS configuration on ranked-video-upload S3 bucket... lock the allowed down.\n- [ ] MemCache / Caching implementation.\n- [ ] Maintenance Mode Implementation\n- [ ] Need Celery deployed\n- [ ] Actual notifications. \n     * Notified when a user ranks your video.  \n     * Notified when your video is ranked 10. \n     * Notified when your video gets a amount of rankings in increments of 50. 50, 100, 150, 200 and so on.\n\n- [ ] Figure out how to properly scale this thing.\n\n- [ ] Rate Throttling for Register and Auth\n- [ ] Dynamically switch NGINX environment for release branch\n- [ ] Setup gunicorn upstart conf\n- [ ] Load Test again.\n- [ ] Periodic failure checking and requeue for failed video processing [Also check for possibility of missing an SNS notif.]\n- [ ] Need to have fallbacks for problems like the video won't transcode - or won't save afteer transcode...etc\n\n### Low Priority\n- [ ] Setup Python Web New relic Integration\n- [ ] Remove redis Cache in Middleware\n\n"
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}