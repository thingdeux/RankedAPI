{
  "title": "TODO",
  "cells": [
    {
      "type": "markdown",
      "data": "# BEFORE V1 - ASKS"
    },
    {
      "type": "markdown",
      "data": "* 'Add Highest Ranked in Category' functionality [SETTINGS] - gnarly query - can cache for a while.\n* 'Add by Username' \n* Endpoint for connect contacts / connect facebook. Should take a batch array of e-mails and return which ones are registered.\n* Implement video views logic to prevent gaming of the views sytem.\n* Paginate comments.\n* Search for base category. Should return all videos that match the sub-category - and if you're ready to \n  Take out some hits\n* Photos\n  - Define and document models for API\n  - Implement hashtagable\n  - Url generation for photo uploads.\n  - Do photos need to be processed? \n  - Are photos supposed to be showing inline with videos on the home feed?\n* Notifications\n  - Base Implementation\n  - Allow user to set the notification preference\n  - Push Notification on API server\n  - Define notification structure in API\n  - Look into websockets for up to the minute notifications while using the app - otherwise poll.\n  - Create 'Your Peeps' notification endpoint\n  - Create 'Your Posts' notification endpoint\n  - Create 'Your Ranks' notification endpoint - [Activity Feed of the users rankings]\n  - Create notifications endpoint for rankings you've received.\n* Surface Ranked History\n* Create smaller images for profile.\n* Allow avatars to have generated urls liek on web. Those shouldn't be accepted on the API server.\n* Setup Celery task queues for various events.\n* Need to have fallbacks for problems like the video won't transcode - or won't save afteer transcode...etc\n* Need to define and implement the ranking algorithm\n* Sharing:\n - Open share endpoint for unauthed viewing.\n - Prevent users from sharing your videos.\n - Notification for someone generating a share link.\n* Contests:\n  - Button on the profile page that people can click on to see contests.\n  - Users can click join - it sends them to the upload screen with a pre-filled hashtag.\n  - The ranking will be determined after a set amount of time - and will query based on hashtag and true ranking.\n  - Only hashtags that were entered on upload are eligible.\n  - Contests will be associated to sponsors.\n  - Contest Name.\n    Contest Length.\n    Contest Sponsor -> Sponsor has associated data like url for their logo or url for their site ..\n    Contest Associated Hashtag\n    Contest Rules / Terms / Restrictions\n  - Need to refactor the Hashtag implementation to support contests - each Hashtag should *gulp* have its on entry in the DB.\n*  Implement Trend Setters logic  - [Currently just returning random users]\n*  Implement report video functionality on the API.\n*  Implement auto-dmca takedown\n*  'Follow these trendsetters' [Settings] - Clarify and build\n*  'Login Verification' [Settings]\n* Figure out how to properly scale this thing.\n* Varnish auth setup to lock down videos gateway."
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "markdown",
      "data": "### Up Next:\n- [ ] Setup Python Web New relic Integration\n- [ ] Setup SSL cert on load balancers\n- [ ] Set max limit query param on API calls\n- [ ] Periodic failure checking and requeue for failed video processing [Also check for possibility of missing an SNS notif.]\n- [ ] Remove redis Cache in Middleware\n- [ ] Query for parent categories should return all sub-category results\n\n### Small Things to tackle eventually\n- [ ] Rate Throttling for Register and Auth\n- [ ] Dynamically switch NGINX environment for release branch\n- [ ] Setup gunicorn upstart conf\n- [ ] Load Test again.\n\n### Before Production:\n- [ ] Purge /following on add or remove\n- [ ] Invesitgate cache-control private for /users/me/ and /video\n- [ ] Investigate Varnish for OAuth2 [https://docs.varnish-software.com/policy-engine/auth/oauth2/]\n- [ ] Update CodeDeploy Permissions for code deploy user. More restrictive\n- [ ] Upgrade to Python 3.6 on centOS boxes.\n- [ ] Update CORS configuration on ranked-video-upload S3 bucket... lock the allowed down.\n- [ ] MemCache / Caching implementation.\n- [ ] Maintenance Mode Implementation\n- [ ] Need Celery deployed\n- [ ] Picture Upload and support. Having that would be fantastic.\n- [ ] Actual notifications. \n     * Notified when a user ranks your video.  \n     * Notified when your video is ranked 10. \n     * Notified when your video gets a amount of rankings in increments of 50. 50, 100, 150, 200 and so on.\n- [ ] Sharing a video with another user. \n\n\n\n\n\n\n\n\n### Done:\n- [x] Paginate /videos/top/\n- [x] More detailed search.\n- [x] After profling slap a Varnish server in front. \n- [x] Route 53 Transfered to Org on AWS\n- [x] Figure out why New Relic isn't populating.\n- [x] Following counts should be updated on unfollow.\n- [x] Server monitoring solution in place\n- [x] Run profile import on demo.\n- [x] Secure EC2 Boxes\n- [x] Remove CORS origin allow all in Django\n- [x] Remove extra Olympics category on Demo\n- [x] Run Purge Videos on Demo Environment\n- [x] Block Mozilla/5.0 Jorgee\n- [x] PUT - Avatar getting 500's\n- [x] Getting cache hits on /users/me/ for some reason\n- [x] Varnish!\n- [x] Add TTL to *ALL* calls before Varnish.\n- [x] Calculate rank amount periodically\n- [x] Update favorite categories for users on an interval.\n- [x] Search through hashtags\n- [x] Paginate the videos responses (Must)\n- [x] Remove old videos that aren't processing for \n- [x] Add ordinal to categories\n- [x] Random profile id's for trend setters\n- [x] get_trend_setters_queryset - have it use some random user id's\n- [x] Load Test\n- [x] Unit Tests for Put/Patch on /users/<id>\n- [x] Make sure to run migration for profile e-mail and import job on demo DB\n- [x] Local_Settings.py - regen secret key\n- [x] Redo Admin p/w and setup POSTGRES DB\n- [x] Spin up a middle-tier cache server\n- [x] Run 0 fixture and import on a demo box.\n- [x] Setup API Demo Environment\n- [x] Spin up another couple of app boxes\n- [x] Create Demo DB\n- [x] Base analytics support\n- [x] Create a way to acquire ids of videos that a user has already ranked.\n- [x] Cloudfront for Videos\n- [x] Cloudfront for Static Files\n- [x] Profile and improve <all> endpoint queries\n- [x] Create call for setting 'views' on video.\n- [x] Fix chmod not setting execution properties on .sh script.\n- [x] AWS Transcode to 1:1\n- [x] Parse #'s from the video title/caption\n- [x] Add average rank to videos (will have to be mocked - no ranking algorithm for V1)\n- [x] Properly set is_ranked_10 on videos .. periodically\n- [x] Implement new /search endpoint\n- [x] Update Profile serializer to render categories\n- [x] Limit videos to followers\n- [x] Disable /api/v1/users/ list\n- [x] Update follower / following count on Profile (Make sure it's Atomic)\n- [x] Add profile counts to /users/<id> endpoint\n- [x] Add top 10 ranked count to profile\n- [x] Add Mocked Ranked_10 count for profile page.\n- [x] Cloudfront for Static\n- [x] Comment out profile update on deployment\n- [x] Create import / update job for profiles/videos (from spreadsheet)\n- [x] Import form for Taylor\n- [x] Make sure to update the documentation for /users/{user_id} - include 'videos' \n- [x] Set LightProfile model for multiple endpoints.\n- [x] Remove E-Mail from serialized profile info on video detail\n- [x] Functional API Endpoints [ Search ]\n- [x] Ability to see who follows a user.\n- [x] Avatar Upload Front-End Help for Greg\n- [x] Setup Profile Following.\n- [x] Verify Patch/PUT on Videos/detail\n- [x] Update Profile Put/Patch\n- [x] Create some demo data for Greg\n- [x] RDS Setup for shared DB\n- [x] Create Categories on dev DB\n- [x] Upload category assets to S3\n- [x] Fix NGINX static hosting.\n- [x] Update Swagger Documentation for Videos\n- [x] Functional API Endpoints [ Video ]\n- [x] Functional API Endpoints [ Video - Rank ]\n- [x] Functional API Endpoints [ Video - Comment ]\n- [x] Functional API Endpoints [ Categories ]\n- [x] Fix the issue of a 500 when there are no videos.\n- [x] Video Ranking\n- [x] Video Commenting\n- [x] Create Auto-Deploy for Greg\n- [x] Video Endpoint Setup\n- [x] Video Endpoint Tweaks\n- [x] Video Auto-Transcode Capability\n- [x] Video Upload Capability\n- [x] Avatar Uploads functionality\n- [x] [Roll in Django OAuth](quiver-note-url/1436ADF9-7D48-435E-BF0D-E6D4017DF71A)\n- [x] Add authorization header to API documentation .. all secure endpoints.\n- [x] Finish API Documentation\n- [x] Deployment stalling during afterInstall (gunicorn direct not daemon - upstart)\n- [x] Create SNS Listener for Transcode DONE / ERROR\n- [x] Listen to AWS SNS for - 'RankedEncodingDone' and 'RankedEncodingFailed'\n- [x] Clean up old, non finished uploading files on S3 and video relations locally.\n"
    },
    {
      "type": "markdown",
      "data": ""
    }
  ]
}