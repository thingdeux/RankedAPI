swagger: "2.0"
info:
  title: "Ranked API"
  description: "API for mobile and/or Web Clients"
  version: "0.0.1"
  contact:
    email: "me@josh.land"

host: "dev.goranked.com"
basePath:
  "/api/v1"
schemes:
  - "http"
tags:
  - User:
    name: "User"
    description: "Everything related to user accounts"
  - Videos:
    name: "Videos"
    description: "Everything related to Videos"

securityDefinitions:
  ranked_auth:
      type: "oauth2"
      authorizationUrl: "http://dev.goranked.com/api/v1/users/auth/"
      flow: "implicit"
      scopes:
        write:user: "Modify User profile"
        write:videos: "Upload and classify Videos"
        read:user: "Read your user profile"
        read:videos: "Read and Explore Videos"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"

definitions:
  SortCriteria:
    type: string
    enum: &SORTS
      - Top
      - New
      - Featured
  UserAuth:
    type: "object"
    properties:
      access_token:
        type: "string"
        example: "FF$#($&*%#BFBFBKA123"
      token_type:
        type: "string"
        example: "Bearer"
      expires_in:
        type: "integer"
        format: "int64"
        example: 36000
      refresh_token:
        type: "string"
        example: "RW$)%(^(^$#DSJFJ"
      scope:
        type: "string"
        example: "read"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 12345
      username:
        type: "string"
        example: "Joshinator"
      email:
        type: "string"
        example: "josh@josh.com"
      avatar_url:
        type: "string"
        example: "http://localhost/static/images/1234.jpg"
      is_partner:
        type: "boolean"
        example: true
      is_featured:
        type: "boolean"
        example: false
      last_logged_in:
        type: "string"
        example: "2009-06-11 17:02:09+0000"

  UserArray:
    type: "object"
    properties:
      users:
        type: "array"
        items:
          $ref: '#/definitions/User'

  Video:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 12345
      title:
        type: "string"
        example: "When you've got it - flaunt it"
      ranking:
        type: "integer"
        format: "int32"
        example: 34
      is_featured:
        type: "boolean"
        example: false
      category:
        type: "string"
        example: "Music"
      sub_category:
        type: "string"
        example: "Acapella"
      uploaded_by:
        $ref: "#/definitions/User"

  VideoDetail:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 12345
      title:
        type: "string"
        example: "When you've got it - flaunt it"
      ranking:
        type: "integer"
        format: "int32"
        example: 34
      is_featured:
        type: "boolean"
        example: false
      category:
        type: "string"
        example: "Music"
      sub_category:
        type: "string"
        example: "Acapella"
      uploaded_by:
        $ref: "#/definitions/User"

  VideoArray:
    type: "object"
    properties:
      videos:
        type: "array"
        items:
          $ref: '#/definitions/Video'

paths:
  /users/register:
    post:
      summary: "User Registration Endpoint"
      tags:
        - "User"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          name: "username"
          type: "string"
          required: true
          example: "SaraDean245"
        - in: "formData"
          name: "email"
          type: "string"
          required: true
          example: "me@me.me"
        - in: "formData"
          name: "password"
          type: "string"
          required: true
          example: "4Toxic"
        - in: "formData"
          name: "unlock_key"
          type: "string"
          required: true
          example: "TooSoonButN0TSoon"
      responses:
        201:
          description: "Account created"
          schema:
            $ref: "#/definitions/UserAuth"
        400:
          description: "Missing Required Fields"
        408:
          description: "Account already exists"
  /users/auth:
    post:
      summary: "OAuth Authorization Endpoint for already registered users."
      tags:
        - "User"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          name: "grant_type"
          type: "string"
          required: true
          example: "SaraDean245"
        - in: "formData"
          name: "Username"
          type: "string"
          required: true
          example: "Timmy2"
        - in: "formData"
          name: "password"
          type: "string"
          required: true
          example: "f34455"
      responses:
        200:
          description: "Auth Success"
          schema:
            $ref: "#/definitions/UserAuth"
        401:
          description: "Incorrect username/password combo"
        403:
          description: "Access Denied or account deleted"
  /users/me:
    get:
      summary: "Returns authorized users information"
      tags:
        - "User"
      produces:
        - "application/json"
      security:
        - ranked_auth:
          - write:user
          - read:user
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        401:
          description: "Unauthorized"
        403:
          "description": "Access Denied"
        404:
          description: "No account found"
  /users/{user_id}:
    get:
      summary: "Returns a user queried by id"
      tags:
        - "User"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: user_id
          required: true
          type: int64
          minimum: 1
      security:
        - ranked_auth:
          - write:user
          - read:user
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        401:
          description: "Unauthorized"
        403:
          "description": "Access Denied"
        404:
          description: "Account does not exist"

    put:
      summary: "Update a Users information"
      tags:
        - "User"
      consumes:
        - "application/json"
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      parameters:
        - in: query
          name: user_id
          required: true
          type: string
        - in: "formData"
          name: "email"
          description: "Users' E-Mail address"
          required: true
          type: "string"
        - in: "formdata"
          name: "username"
          description: "Users' Username"
          required: true
          type: "string"
        - in: "formData"
          name: "password"
          description: "Users' Password"
          required: true
          type: "string"

      responses:
        200:
          description: "Success"
          name: "UserCreation"
          schema:
            "$ref": "#/definitions/User"
        401:
          description: "Unauthorized"
        403:
          "description": "Access Denied"
  /users/{user_id}/friends:
    get:
      summary: "List a given users' friends"
      tags:
        - "User"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      responses:
          200:
            description: "Success"
            schema:
              $ref: "#/definitions/UserArray"
          401:
            description: "Unauthorized"
          404:
            description: "Account does not exist"
          403:
            "description": "Access Denied"
    post:
      summary: "Follow a user"
      tags:
        - "User"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      parameters:
        - in: path
          name: user_id
          required: true
          type: int64
          minimum: 1
      responses:
          200:
            description: "Success"
          401:
            description: "Unauthorized"
          403:
            "description": "Access Denied - Can't Follow this user."
          404:
            description: "Account does not exist"
    delete:
      summary: "Stop Following a user"
      tags:
        - "User"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      parameters:
        - in: path
          name: user_id
          required: true
          type: int64
          minimum: 1
      responses:
          200:
            description: "Success"
          401:
            description: "Unauthorized"
          403:
            "description": "Access Denied"
          404:
            description: "Not currently following this user"

  # Videos
  /videos:
    get:
      summary: "List of most popular videos"
      tags:
        - "Videos"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - read:user
      responses:
        200:
          description: "Success"
          object: "array"
          schema:
            $ref: "#/definitions/VideoArray"

  /videos/{video_id}:
    get:
      summary: "List of most popular videos"
      tags:
        - "Videos"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - read:user
      parameters:
        - in: "query"
          name: "video_id"
          description: "Ranked Video Detail Resource - All details on a given video"
          required: true
          type: "integer"
      responses:
        200:
          description: "Success"
          object: "array"
          schema:
            $ref: "#/definitions/VideoArray"