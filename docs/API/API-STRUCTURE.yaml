swagger: "2.0"
info:
  title: "Ranked API"
  description: "API for mobile and/or Web Clients"
  version: "0.0.8"
  contact:
    email: "me@josh.land"

host: "dev.goranked.com"
basePath:
  "/api/v1"
schemes:
  - "http"
  - "https"
tags:
  - User:
    name: "User"
    description: "Everything related to user accounts"
  - Videos:
    name: "Videos"
    description: "Everything related to Videos"
  - Comments:
    name: "Comments"
    description: "Everything related to comments"
  - Search:
    name: "Search"
    description: "Everything related to Searching"
  - Categories:
    name: "Categories"
    description: "Everything related to categories"

securityDefinitions:
  ranked_auth:
      type: "oauth2"
      tokenUrl: "http://dev.goranked.com/api/v1/users/auth/token/"
      flow: "password"
      scopes:
        write:user: "Modify User profile"
        write:videos: "Upload and classify Videos"
        read:user: "Read your user profile"
        read:videos: "Read and Explore Videos"
  api_key:
    type: "apiKey"
    name: "Authorization"
    in: "header"

definitions:
  SortCriteria:
    name: "Sort Criteria"
    type: string
    enum: &SORTS
      - Top
      - New
      - Featured
  SearchTypes:
    name: "Search Types"
    type: string
    enum: &SEARCHTYPES
      - Video
      - Picture
      - User
  # User Definitions
  UserAuth:
    type: "object"
    properties:
      access_token:
        type: "string"
        example: "FF$#($&*%#BFBFBKA123"
      token_type:
        type: "string"
        example: "Bearer"
      expires_in:
        type: "integer"
        format: "int64"
        example: 36000
      refresh_token:
        type: "string"
        example: "RW$)%(^(^$#DSJFJ"
      scope:
        type: "string"
        example: "read"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 12345
      username:
        type: "string"
        example: "Joshinator"
      email:
        type: "string"
        example: "josh@josh.com"
      avatar_url:
        type: "string"
        example: "http://localhost/static/images/1234.jpg"
      is_partner:
        type: "boolean"
        example: true
      is_featured:
        type: "boolean"
        example: false
      last_logged_in:
        type: "string"
        example: "2009-06-11 17:02:09+0000"
  UserList:
    type: "object"
    properties:
      users:
        type: "array"
        items:
          $ref: '#/definitions/User'
  # Videos Definitions
  Video:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 12345
      title:
        type: "string"
        example: "When you've got it - flaunt it"
      rank:
        type: "integer"
        format: "int32"
        example: 34
      is_featured:
        type: "boolean"
        example: false
      category:
        type: "string"
        example: "Music"
      sub_category:
        type: "string"
        example: "Acapella"
      likes:
        type: integer
        format: "int32"
        example: 12
      image_links:
        $ref: "#/definitions/VideoImageOptions"
      uploaded_by:
        $ref: "#/definitions/User"
  VideoDetail:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 12345
      title:
        type: "string"
        example: "When you've got it - flaunt it"
      ranking:
        type: "integer"
        format: "int32"
        example: 34
      is_featured:
        type: "boolean"
        example: false
      category:
        type: "string"
        example: "Music"
      sub_category:
        type: "string"
        example: "Acapella"
      is_processing:
        type: "boolean"
        example: false
      comments:
        type: "array"
        items:
          $ref: '#/definitions/Comment'
      links:
        type: "object"
        $ref: "#/definitions/VideoLinks"
      uploaded_by:
        $ref: "#/definitions/User"
  VideoImageOptions:
    type: "object"
    properties:
      thumbnail:
        type: "string"
        name: "thumbnail"
        example: "http://aws.s3344555/static/vifff.jpg"
      large:
        type: "string"
        name: "large"
        example: "http://aws.s3344555/static/vifff.jpg"
  VideoQualityOptions:
    type: "object"
    properties:
      mobile:
        type: "string"
        name: "mobile"
        example: "http://aws.s3344555/video.mp4"
      low:
        type: "string"
        name: "low"
        example: "http://aws.s3344555/video.mp4"
      high:
        type: "string"
        name: "high"
        example: "http://aws.s3344555/video.mp4"
      hd:
        type: "string"
        name: "hd"
        example: "http://aws.s3344555/video.mp4"
  VideoLinks:
    type: "object"
    properties:
      video_links:
        type: "object"
        $ref: "#/definitions/VideoQualityOptions"
      image_links:
        type: "object"
        $ref: "#/definitions/VideoImageOptions"

  VideoList:
    type: "object"
    properties:
      videos:
        type: "array"
        items:
          $ref: '#/definitions/Video'
  VideoUploadAWSDetails:
    type: "object"
    properties:
      pre_signed_upload_url:
        type: "string"
        name: "pre_signed_upload_url"
        example: "https://aws.pre-sign/324234"
      video_id:
        type: "integer"
        name: "video_id"
        description: "Generated Video ID that can be used to check status and update any values on /videos"
      final_url:
        type: "string"
        name: "final_url"
        example: "https://videos.goranked.com/3234234.mp4"
      AWSAccessKey:
        type: "string"
        name: "AWSAccessKeyId"
        example: "123fsdfsFFJL:J3234"
        description: "AWS Access Key"
      Policy:
        type: "string"
        name: "policy"
        example: "12313fsdfsdf32234234:J3234"
        description: "AWS Policy Generation"
      Signature:
        type: "string"
        name: "signature"
        example: "132RSKFF/g"
        description: "AWS Signing Signature for the request"

  VideoUploadDetails:
    type: "object"
    properties:
      pre_signed_upload_url:
        type: "string"
        name: "pre_signed_upload_url"
        example: "https://aws.pre-sign/324234"
      video_id:
        type: "integer"
        name: "video_id"
        description: "Generated Video ID that can be used to check status and update any values on /videos"
      final_url:
        type: "string"
        name: "final_url"
        example: "https://videos.goranked.com/3234234.mp4"
      aws_fields:
        type: "object"
        description: "These fields should all be attached to the upload post via form-data along w/ file"
        $ref: '#/definitions/VideoUploadAWSDetails'


  # Comments Definitions
  Comment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 12345
      posted_by:
        type: "string"
        example: "Jane_Doe"
      text:
        type: "string"
        example: "I love how rambunctious you are during Summer."
      posted_on:
        type: "string"
        example: "2009-06-11 17:02:09+0000"
  # Search Definitions
  SearchResult:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1234
      name:
        type: "string"
        example: "I like my moves"
      image_url:
        type: "string"
        example: "http://dev.ranked.com/images/thumbnails/fsdf25.jpg"
      result_type:
        type: "string"
        enum: *SEARCHTYPES
  ErrorInfo:
    type: "object"
    properties:
      description:
        name: "description"
        example: "Missing The Following Fields"
      errors:
        name: "errors"
        type: "array"
        items:
          type: "string"
          example: "username"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
        description: "ID of category"
      name:
        type: "string"
        example: "Music"
        description: "Category Name"
      parent_category:
        type: "string"
        example: "Food"
        description: "If a sub-category - name of parent category"
      is_sub_category:
        type: "boolean"
        description: "Boolean that denotes whether or not this is a sub-category"
        example: true

paths:
  /users/register/:
    post:
      summary: "User Registration Endpoint"
      operationId: "register_user"
      tags:
        - "User"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          name: "username"
          type: "string"
          required: true
          example: "SaraDean245"
        - in: "formData"
          name: "email"
          type: "string"
          required: true
          example: "me@me.me"
        - in: "formData"
          name: "password"
          type: "string"
          required: true
          example: "4Toxic"
        - in: "formData"
          name: "unlock_key"
          type: "string"
          required: true
          example: "TooSoonButN0TSoon"
        - in: "formData"
          name: "phone_number"
          type: "string"
          required: false
          example: "(555) 123-4567"
      responses:
        201:
          description: "Account created"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Missing Required Fields"
          schema:
            $ref: "#/definitions/ErrorInfo"
        401:
          description: "Unauthorized"
        408:
          description: "Account already exists"

  /users/auth/token/:
    post:
      summary: "OAuth Authorization Endpoint for already registered users."
      operationId: "authorize_user"
      tags:
        - "User"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "formData"
          name: "grant_type"
          type: "string"
          required: true
          example: "SaraDean245"
        - in: "formData"
          name: "username"
          type: "string"
          required: true
          example: "Timmy2"
        - in: "formData"
          name: "password"
          type: "string"
          required: true
          example: "f34455"
        - in: "formData"
          name: "client_id"
          type: "string"
          required: true
          example: "44555jfjffj"
      responses:
        200:
          description: "Auth Success"
          schema:
            $ref: "#/definitions/UserAuth"
        401:
          description: "Incorrect username/password combo"
        403:
          description: "Access Denied or account deleted"

  /users/me/:
    get:
      summary: "Returns authorized users information"
      operationId: "get_current_user_details"
      tags:
        - "User"
      produces:
        - "application/json"
      security:
        - ranked_auth:
          - write:user
          - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
      responses:
        200:
          description: "Success - User Object"
          schema:
            type: "object"
            properties:
              profile:
                type: "object"
                name: "profile"
                $ref: "#/definitions/User"
              videos:
                type: "array"
                name: "videos"
                description: "The authorized users uploaded videos"
                items:
                  $ref: "#/definitions/Video"
        401:
          description: "Unauthorized"
        403:
          "description": "Access Denied"
        404:
          description: "No account found"

  /users/me/avatar/:
     put:
       summary: Upload an avatar image file.
       operationId: "upload_avatar"
       security:
        - ranked_auth:
           - write:user
           - read:user
       tags:
         - "User"
       consumes:
         - multipart/form-data
       parameters:
         - in: formData
           name: file
           type: file
           description: The file to upload [ Size should be under 1mb ]
       responses:
          200:
            description: "Success"
            schema:
              $ref: "#/definitions/User"
          304:
            description: "Not Modified"
          401:
            description: "Unauthorized"
          404:
            description: "Account does not exist"
          403:
            "description": "Access Denied"

  /users/{user_id}/:
    get:
      summary: "Returns a user queried by id"
      operationId: "get_user_details"
      tags:
        - "User"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
        - in: path
          name: user_id
          required: true
          type: integer
          format: "int64"
          minimum: 1
      security:
        - ranked_auth:
          - write:user
          - read:user
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        401:
          description: "Unauthorized"
        403:
          "description": "Access Denied"
        404:
          description: "Account does not exist"

    put:
      summary: "Update a Users information"
      operationId: "update_user_details"
      tags:
        - "User"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
        - in: query
          name: user_id
          required: true
          type: integer
        - in: "formData"
          name: "email"
          description: "Users' E-Mail address"
          required: true
          type: "string"
        - in: "formdata"
          name: "username"
          description: "Users' Username"
          required: true
          type: "string"
        - in: "formData"
          name: "password"
          description: "Users' Password"
          required: true
          type: "string"

      responses:
        200:
          description: "Success"
          name: "UserCreation"
          schema:
            "$ref": "#/definitions/User"
        401:
          description: "Unauthorized"
        403:
          "description": "Access Denied"

    patch:
      summary: "Update one or more fields of a Users' profile"
      operationId: "update_user_detail_patch"
      tags:
        - "User"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
        - in: query
          name: user_id
          required: true
          type: integer
        - in: "formData"
          name: "email"
          description: "Users' E-Mail address"
          required: false
          type: "string"
        - in: "formdata"
          name: "username"
          description: "Users' Username"
          required: false
          type: "string"
        - in: "formData"
          name: "password"
          description: "Users' Password"
          required: false
          type: "string"
        - in: "formData"
          name: "avatar_url"
          description: "Avatar URL"
          required: false
          type: "string"
        - in: "formData"
          name: "phone_number"
          description: "Phone Number"
          required: false
          type: "string"

      responses:
        200:
          description: "Success"
          name: "UserCreation"
          schema:
            "$ref": "#/definitions/User"
        401:
          description: "Unauthorized"
        403:
          "description": "Access Denied"

  /users/{user_id}/friends/:
    get:
      summary: "List a given users' followed friends"
      operationId: "get_friends"
      tags:
        - "User"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
      responses:
          200:
            description: "Success"
            schema:
              $ref: "#/definitions/UserList"
          401:
            description: "Unauthorized"
          404:
            description: "Account does not exist"
          403:
            "description": "Access Denied"
    post:
      summary: "Follow a user"
      operationId: "add_new_followers"
      tags:
        - "User"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
        - in: path
          name: user_id
          required: true
          type: integer
          minimum: 1
      responses:
          200:
            description: "Success"
          401:
            description: "Unauthorized"
          403:
            "description": "Access Denied - Can't Follow this user."
          404:
            description: "Account does not exist"
    delete:
      summary: "Stop Following a user"
      operationId: "stop_following_user"
      tags:
        - "User"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
        - in: path
          name: user_id
          required: true
          type: integer
          format: "int64"
          minimum: 1
      responses:
          200:
            description: "Success"
          401:
            description: "Unauthorized"
          403:
            "description": "Access Denied"
          404:
            description: "Not currently following this user"

  # Videos
  /videos/:
    get:
      summary: "List of top 20 most popular videos"
      operationId: "get_top_videos"
      tags:
        - "Videos"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - read:videos
           - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/VideoList"
        401:
          description: "Unauthorized"
        403:
          description: "Access Denied"

  /videos/{video_id}/:
    get:
      summary: "Detailed information about one video"
      operationId: "get_video_details"
      tags:
        - "Videos"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - read:videos
           - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
        - in: "path"
          name: "video_id"
          description: "Ranked Video Detail Resource - All details on a given video"
          required: true
          type: "integer"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/VideoDetail"
        401:
          description: "Unauthorized"
        403:
          description: "Access Denied - Not authorized"
        404:
          description: "Video Not Found"

    put:
      summary: "Update an existing Video"
      operationId: "update_video_details"
      tags:
        - "Videos"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
        - in: "path"
          name: "video_id"
          required: true
          type: "integer"
        - in: "formData"
          name: "title"
          required: false
          type: "string"
          description: "Title of the video"
        - in: "formData"
          name: "category"
          required: false
          type: "string"
          description: "String name for valid category"
        - in: "formData"
          name: "sub_category"
          required: false
          type: "string"
          description: "String name for valid sub-category"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Video"
        401:
          description: "Unauthorized"
        403:
          description: "Access Denied"
        404:
          description: "Video Not Found"

    delete:
      summary: "Delete personal videos from Ranked"
      operationId: "remove_video"
      tags:
        - "Videos"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write: user
           - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
        - in: "path"
          name: "video_id"
          description: "Ranked Video Detail Resource - All details on a given video"
          required: true
          type: "integer"
      responses:
        200:
          description: "Success"
        401:
          description: "Unauthorized"
        403:
          description: "Access Denied! You don't own this video"
        404:
          description: "Video Not Found"

  /videos/upload/:
    post:
      summary: "Endpoint to handle video uploads"
      operationId: "init_video_upload"
      tags:
          - "Videos"
      produces:
        - "application/json"
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
        - in: "formData"
          name: "filename"
          description: "name of file being uploaded"
          required: true
          type: "string"
        - in: "formData"
          name: "file_type"
          description: "File type of uploading video"
          required: true
          type: "string"
          example: "video/mp4"
      security:
          - ranked_auth:
             - write:user
             - read:user
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/VideoUploadDetails"
        401:
          description: "Unauthorized"
        403:
          description: "Access Denied"

  /videos/{video_id}/comments/:
    post:
      summary: "Comment on a given video"
      operationId: "create_video_comment"
      tags:
        - "Videos"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
        - in: "path"
          name: "video_id"
          required: true
          type: "integer"
          description: "Video ID to be commented upon"
        - in: "formData"
          name: "comment"
          required: false
          type: "string"
          description: "Comment to be left the video"
      responses:
        200:
          description: "Success"
        401:
          description: "Unauthorized"
        403:
          description: "Access Denied"
        404:
          description: "Video Not Found"

  /videos/{video_id}/rank/:
    post:
      summary: "'Like' or rank a given video"
      operationId: "add_video_rank"
      tags:
        - "Videos"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
        - in: "path"
          name: "video_id"
          required: true
          type: "integer"
          description: "Video ID to be ranked"
        - in: "formData"
          name: "rank_amount"
          required: true
          type: "integer"
          description: "Rank value between 1-10"
      responses:
        200:
          description: "Success"
        304:
          description: "This Video has already been ranked"
        401:
          description: "Unauthorized"
        403:
          description: "Access Denied"
        404:
          description: "Video Not Found"

    delete:
      summary: "'Dislike' or de-rank a given video"
      operationId: "remove_vide_rank"
      tags:
        - "Videos"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
        - in: "path"
          name: "video_id"
          required: true
          type: "integer"
          description: "Video ID to unrank"
      responses:
        200:
          description: "Success"
        401:
          description: "Unauthorized"
        403:
          description: "Access Denied"
        404:
          description: "No Ranking Found for user"

  /search/:
    get:
      summary: "Search for Content"
      operationId: "get_search_results"
      tags:
        - "Search"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
        - in: "query"
          name: "category"
          required: false
          type: "string"
          description: 'Search by specific category. ex: "Food"'
          example: "Music"
        - in: "query"
          name: "sub_category"
          required: false
          type: "string"
          description: "Search by specific sub-category. ex: Latin"
          example: "Music"
        - in: "query"
          name: "types"
          required: false
          type: "string"
          description: "Comma delimited list of search result types (see models re: Search Types). ex: Video,Users"
          enum: *SEARCHTYPES
        - in: "query"
          name: "sort"
          type: "string"
          description: "NOTE: Ignored for Alpha - always top - sort order (see models re: Sort Criteria)"
          enum: *SORTS
      responses:
        200:
          description: "Success"
          type: "array"
          items:
            $ref: '#/definitions/SearchResult'
        401:
          description: "Unauthorized"
        404:
          description: "Error During Search"

  /categories/:
    get:
      summary: "List of available categories / sub-categories"
      operationId: "list_categories"
      tags:
        - "Categories"
      produces:
        - "application/json"
      security:
        - ranked_auth:
           - write:user
           - read:user
      parameters:
        - in: "header"
          name: "Authorization"
          type: "string"
          required: true
          example: "F#55344F"
          description: "Required Authorization Bearer Token for OAuth2"
      responses:
        200:
          description: "Success"
          type: "array"
          items:
            $ref: '#/definitions/Category'
        401:
          description: "Unauthorized"