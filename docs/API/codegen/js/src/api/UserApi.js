/**
 * Ranked API
 * API for mobile and/or Web Clients
 *
 * OpenAPI spec version: 0.0.8
 * Contact: me@josh.land
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/User', 'model/UserAuth', 'model/UserList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/User'), require('../model/UserAuth'), require('../model/UserList'));
  } else {
    // Browser globals (root is window)
    if (!root.RankedApi) {
      root.RankedApi = {};
    }
    root.RankedApi.UserApi = factory(root.RankedApi.ApiClient, root.RankedApi.User, root.RankedApi.UserAuth, root.RankedApi.UserList);
  }
}(this, function(ApiClient, User, UserAuth, UserList) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 0.0.8
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addNewFollowers operation.
     * @callback module:api/UserApi~addNewFollowersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Follow a user
     * @param {Number} userId 
     * @param {module:api/UserApi~addNewFollowersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addNewFollowers = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling addNewFollowers");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ranked_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/friends', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizeUser operation.
     * @callback module:api/UserApi~authorizeUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAuth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * OAuth Authorization Endpoint for already registered users.
     * @param {String} grantType 
     * @param {String} username 
     * @param {String} password 
     * @param {String} clientId 
     * @param {module:api/UserApi~authorizeUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAuth}
     */
    this.authorizeUser = function(grantType, username, password, clientId, callback) {
      var postBody = null;

      // verify the required parameter 'grantType' is set
      if (grantType == undefined || grantType == null) {
        throw new Error("Missing the required parameter 'grantType' when calling authorizeUser");
      }

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw new Error("Missing the required parameter 'username' when calling authorizeUser");
      }

      // verify the required parameter 'password' is set
      if (password == undefined || password == null) {
        throw new Error("Missing the required parameter 'password' when calling authorizeUser");
      }

      // verify the required parameter 'clientId' is set
      if (clientId == undefined || clientId == null) {
        throw new Error("Missing the required parameter 'clientId' when calling authorizeUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'grant_type': grantType,
        'Username': username,
        'password': password,
        'client_id': clientId
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserAuth;

      return this.apiClient.callApi(
        '/users/auth/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCurrentUserDetails operation.
     * @callback module:api/UserApi~getCurrentUserDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns authorized users information
     * @param {module:api/UserApi~getCurrentUserDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getCurrentUserDetails = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ranked_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFriends operation.
     * @callback module:api/UserApi~getFriendsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a given users&#39; followed friends
     * @param {module:api/UserApi~getFriendsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserList}
     */
    this.getFriends = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ranked_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserList;

      return this.apiClient.callApi(
        '/users/{user_id}/friends', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserDetails operation.
     * @callback module:api/UserApi~getUserDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user queried by id
     * @param {Number} userId 
     * @param {module:api/UserApi~getUserDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getUserDetails = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserDetails");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ranked_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUser operation.
     * @callback module:api/UserApi~registerUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User Registration Endpoint
     * @param {String} username 
     * @param {String} email 
     * @param {String} password 
     * @param {String} unlockKey 
     * @param {Object} opts Optional parameters
     * @param {String} opts.phoneNumber 
     * @param {module:api/UserApi~registerUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.registerUser = function(username, email, password, unlockKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'username' is set
      if (username == undefined || username == null) {
        throw new Error("Missing the required parameter 'username' when calling registerUser");
      }

      // verify the required parameter 'email' is set
      if (email == undefined || email == null) {
        throw new Error("Missing the required parameter 'email' when calling registerUser");
      }

      // verify the required parameter 'password' is set
      if (password == undefined || password == null) {
        throw new Error("Missing the required parameter 'password' when calling registerUser");
      }

      // verify the required parameter 'unlockKey' is set
      if (unlockKey == undefined || unlockKey == null) {
        throw new Error("Missing the required parameter 'unlockKey' when calling registerUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'username': username,
        'email': email,
        'password': password,
        'unlock_key': unlockKey,
        'phone_number': opts['phoneNumber']
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopFollowingUser operation.
     * @callback module:api/UserApi~stopFollowingUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop Following a user
     * @param {Number} userId 
     * @param {module:api/UserApi~stopFollowingUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.stopFollowingUser = function(userId, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling stopFollowingUser");
      }


      var pathParams = {
        'user_id': userId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ranked_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/users/{user_id}/friends', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserDetails operation.
     * @callback module:api/UserApi~updateUserDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Users information
     * @param {Number} userId 
     * @param {String} email Users&#39; E-Mail address
     * @param {String} password Users&#39; Password
     * @param {module:api/UserApi~updateUserDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.updateUserDetails = function(userId, email, password, callback) {
      var postBody = null;

      // verify the required parameter 'userId' is set
      if (userId == undefined || userId == null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserDetails");
      }

      // verify the required parameter 'email' is set
      if (email == undefined || email == null) {
        throw new Error("Missing the required parameter 'email' when calling updateUserDetails");
      }

      // verify the required parameter 'password' is set
      if (password == undefined || password == null) {
        throw new Error("Missing the required parameter 'password' when calling updateUserDetails");
      }


      var pathParams = {
      };
      var queryParams = {
        'user_id': userId
      };
      var headerParams = {
      };
      var formParams = {
        'email': email,
        'password': password
      };

      var authNames = ['ranked_auth'];
      var contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/users/{user_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
