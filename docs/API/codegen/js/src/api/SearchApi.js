/**
 * Ranked API
 * API for mobile and/or Web Clients
 *
 * OpenAPI spec version: 0.0.8
 * Contact: me@josh.land
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.RankedApi) {
      root.RankedApi = {};
    }
    root.RankedApi.SearchApi = factory(root.RankedApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Search service.
   * @module api/SearchApi
   * @version 0.0.8
   */

  /**
   * Constructs a new SearchApi. 
   * @alias module:api/SearchApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getSearchResults operation.
     * @callback module:api/SearchApi~getSearchResultsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for Content
     * @param {String} authorization Required Authorization Bearer Token for OAuth2
     * @param {Object} opts Optional parameters
     * @param {String} opts.category Search by specific category. ex: \&quot;Food\&quot;
     * @param {String} opts.subCategory Search by specific sub-category. ex: Latin
     * @param {module:model/String} opts.types Comma delimited list of search result types (see models re: Search Types). ex: Video,Users
     * @param {module:model/String} opts.sort NOTE: Ignored for Alpha - always top - sort order (see models re: Sort Criteria)
     * @param {module:api/SearchApi~getSearchResultsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getSearchResults = function(authorization, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling getSearchResults");
      }


      var pathParams = {
      };
      var queryParams = {
        'category': opts['category'],
        'sub_category': opts['subCategory'],
        'types': opts['types'],
        'sort': opts['sort']
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['ranked_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
