/**
 * Ranked API
 * API for mobile and/or Web Clients
 *
 * OpenAPI spec version: 0.0.8
 * Contact: me@josh.land
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Video', 'model/VideoDetail', 'model/VideoList', 'model/VideoUploadDetails'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Video'), require('../model/VideoDetail'), require('../model/VideoList'), require('../model/VideoUploadDetails'));
  } else {
    // Browser globals (root is window)
    if (!root.RankedApi) {
      root.RankedApi = {};
    }
    root.RankedApi.VideosApi = factory(root.RankedApi.ApiClient, root.RankedApi.Video, root.RankedApi.VideoDetail, root.RankedApi.VideoList, root.RankedApi.VideoUploadDetails);
  }
}(this, function(ApiClient, Video, VideoDetail, VideoList, VideoUploadDetails) {
  'use strict';

  /**
   * Videos service.
   * @module api/VideosApi
   * @version 0.0.8
   */

  /**
   * Constructs a new VideosApi. 
   * @alias module:api/VideosApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addVideoRank operation.
     * @callback module:api/VideosApi~addVideoRankCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &#39;Like&#39; or rank a given video
     * @param {String} authorization Required Authorization Bearer Token for OAuth2
     * @param {Number} videoId Video ID to be ranked
     * @param {Number} rankAmount Rank value between 1-10
     * @param {module:api/VideosApi~addVideoRankCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addVideoRank = function(authorization, videoId, rankAmount, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling addVideoRank");
      }

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling addVideoRank");
      }

      // verify the required parameter 'rankAmount' is set
      if (rankAmount == undefined || rankAmount == null) {
        throw new Error("Missing the required parameter 'rankAmount' when calling addVideoRank");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
        'rank_amount': rankAmount
      };

      var authNames = ['ranked_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/videos/{video_id}/rank/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createVideoComment operation.
     * @callback module:api/VideosApi~createVideoCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Comment on a given video
     * @param {String} authorization Required Authorization Bearer Token for OAuth2
     * @param {Number} videoId Video ID to be commented upon
     * @param {Object} opts Optional parameters
     * @param {String} opts.comment Comment to be left the video
     * @param {module:api/VideosApi~createVideoCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createVideoComment = function(authorization, videoId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling createVideoComment");
      }

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling createVideoComment");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
        'comment': opts['comment']
      };

      var authNames = ['ranked_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/videos/{video_id}/comments/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopVideos operation.
     * @callback module:api/VideosApi~getTopVideosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of top 20 most popular videos
     * @param {String} authorization Required Authorization Bearer Token for OAuth2
     * @param {module:api/VideosApi~getTopVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoList}
     */
    this.getTopVideos = function(authorization, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling getTopVideos");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['ranked_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VideoList;

      return this.apiClient.callApi(
        '/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoDetails operation.
     * @callback module:api/VideosApi~getVideoDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detailed information about one video
     * @param {String} authorization Required Authorization Bearer Token for OAuth2
     * @param {Number} videoId Ranked Video Detail Resource - All details on a given video
     * @param {module:api/VideosApi~getVideoDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoDetail}
     */
    this.getVideoDetails = function(authorization, videoId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling getVideoDetails");
      }

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling getVideoDetails");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['ranked_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VideoDetail;

      return this.apiClient.callApi(
        '/videos/{video_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the initVideoUpload operation.
     * @callback module:api/VideosApi~initVideoUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoUploadDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint to handle video uploads
     * @param {String} authorization Required Authorization Bearer Token for OAuth2
     * @param {String} filename name of file being uploaded
     * @param {module:api/VideosApi~initVideoUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoUploadDetails}
     */
    this.initVideoUpload = function(authorization, filename, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling initVideoUpload");
      }

      // verify the required parameter 'filename' is set
      if (filename == undefined || filename == null) {
        throw new Error("Missing the required parameter 'filename' when calling initVideoUpload");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
        'filename': filename
      };

      var authNames = ['ranked_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VideoUploadDetails;

      return this.apiClient.callApi(
        '/videos/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVideRank operation.
     * @callback module:api/VideosApi~removeVideRankCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * &#39;Dislike&#39; or de-rank a given video
     * @param {String} authorization Required Authorization Bearer Token for OAuth2
     * @param {Number} videoId Video ID to unrank
     * @param {module:api/VideosApi~removeVideRankCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeVideRank = function(authorization, videoId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling removeVideRank");
      }

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling removeVideRank");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['ranked_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/videos/{video_id}/rank/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeVideo operation.
     * @callback module:api/VideosApi~removeVideoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete personal videos from Ranked
     * @param {String} authorization Required Authorization Bearer Token for OAuth2
     * @param {Number} videoId Ranked Video Detail Resource - All details on a given video
     * @param {module:api/VideosApi~removeVideoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeVideo = function(authorization, videoId, callback) {
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling removeVideo");
      }

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling removeVideo");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
      };

      var authNames = ['ranked_auth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/videos/{video_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVideoDetails operation.
     * @callback module:api/VideosApi~updateVideoDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing Video
     * @param {String} authorization Required Authorization Bearer Token for OAuth2
     * @param {Number} videoId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.title Title of the video
     * @param {String} opts.category String name for valid category
     * @param {String} opts.subCategory String name for valid sub-category
     * @param {module:api/VideosApi~updateVideoDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    this.updateVideoDetails = function(authorization, videoId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'authorization' is set
      if (authorization == undefined || authorization == null) {
        throw new Error("Missing the required parameter 'authorization' when calling updateVideoDetails");
      }

      // verify the required parameter 'videoId' is set
      if (videoId == undefined || videoId == null) {
        throw new Error("Missing the required parameter 'videoId' when calling updateVideoDetails");
      }


      var pathParams = {
        'video_id': videoId
      };
      var queryParams = {
      };
      var headerParams = {
        'Authorization': authorization
      };
      var formParams = {
        'title': opts['title'],
        'category': opts['category'],
        'sub_category': opts['subCategory']
      };

      var authNames = ['ranked_auth'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Video;

      return this.apiClient.callApi(
        '/videos/{video_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
